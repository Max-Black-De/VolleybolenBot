#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –±–æ—Ç–∞
"""

import pytz
from datetime import datetime, date, time, timedelta
from data.database import Database
from services.event_service import EventService
from services.notification_service import NotificationService
from config.settings import BOT_SETTINGS
from utils.keyboard import create_partial_leave_keyboard

def test_final_requirements():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –¢–†–ï–ë–û–í–ê–ù–ò–ô –ë–û–¢–ê\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    db = Database()
    event_service = EventService(db)
    
    print("üìÖ –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π")
    print(f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {BOT_SETTINGS['TIMEZONE']} ({BOT_SETTINGS['TIMEZONE_NAME']})")
    print(f"–î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {BOT_SETTINGS['TRAINING_DAYS']}")
    print(f"–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {BOT_SETTINGS['TRAINING_TIME']}")
    print(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π: {BOT_SETTINGS['EVENT_CREATION_TIME']}")
    print(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {BOT_SETTINGS['REMINDER_TIME']}")
    print(f"–í—Ä–µ–º—è –∞–≤—Ç–æ–æ—Ç–ø–∏—Å–∫–∏: {BOT_SETTINGS['AUTO_LEAVE_TIME']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    next_training = event_service.get_next_training_day()
    print(f"–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å: {next_training} ({next_training.strftime('%A')})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞—é—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–Ω–∏
    today = datetime.now().date()
    weekday = today.weekday()
    print(f"–°–µ–≥–æ–¥–Ω—è: {today} ({today.strftime('%A')})")
    
    if weekday < 3:  # –î–æ —á–µ—Ç–≤–µ—Ä–≥–∞
        expected_day = today + timedelta(days=3 - weekday)
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π –¥–µ–Ω—å: {expected_day} (—á–µ—Ç–≤–µ—Ä–≥)")
    elif weekday < 6:  # –î–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
        expected_day = today + timedelta(days=6 - weekday)
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π –¥–µ–Ω—å: {expected_day} (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)")
    else:  # –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–ª–∏ –ø–æ–∑–∂–µ
        expected_day = today + timedelta(days=4)  # –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–µ—Ç–≤–µ—Ä–≥–∞
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π –¥–µ–Ω—å: {expected_day} (—Å–ª–µ–¥—É—é—â–∏–π —á–µ—Ç–≤–µ—Ä–≥)")
    
    print("‚úÖ –õ–æ–≥–∏–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    print("üë• –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø–∞–º–∏")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    event_id = event_service.create_event_on_date(next_training)
    print(f"–°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å ID: {event_id}")
    
    # –í–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å—å –≥—Ä—É–ø–ø–∞–º–∏
    db.set_bot_setting('group_registration_enabled', 'true')
    db.set_bot_setting('max_group_size', '3')
    
    print(f"–ó–∞–ø–∏—Å—å –≥—Ä—É–ø–ø–∞–º–∏ –≤–∫–ª—é—á–µ–Ω–∞: {db.is_group_registration_enabled()}")
    print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: {db.get_max_group_size()}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≥—Ä—É–ø–ø–∞–º–∏
    result1 = event_service.join_event_with_group(event_id, 1001, 1, "user1", "–ò–≤–∞–Ω", "–ò–≤–∞–Ω–æ–≤")
    result2 = event_service.join_event_with_group(event_id, 1002, 2, "user2", "–ü–µ—Ç—Ä", "–ü–µ—Ç—Ä–æ–≤")
    result3 = event_service.join_event_with_group(event_id, 1003, 3, "user3", "–°–µ—Ä–≥–µ–π", "–°–µ—Ä–≥–µ–µ–≤")
    
    print(f"–ó–∞–ø–∏—Å—å 1 —á–µ–ª: {'‚úÖ' if result1['success'] else '‚ùå'}")
    print(f"–ó–∞–ø–∏—Å—å 2 —á–µ–ª: {'‚úÖ' if result2['success'] else '‚ùå'}")
    print(f"–ó–∞–ø–∏—Å—å 3 —á–µ–ª: {'‚úÖ' if result3['success'] else '‚ùå'}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    event_info = event_service.get_event_by_id(event_id)
    participants_list = event_service.get_participants_list(event_id, event_info)
    print(f"\n–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n{participants_list}")
    
    print("‚úÖ –ó–∞–ø–∏—Å—å –≥—Ä—É–ø–ø–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    print("üö™ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä —á–∞—Å—Ç–∏—á–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –≥—Ä—É–ø–ø
    test_cases = [
        (3, 3),  # –≥—Ä—É–ø–ø–∞ 3, –º–∞–∫—Å–∏–º—É–º 3
        (2, 3),  # –≥—Ä—É–ø–ø–∞ 2, –º–∞–∫—Å–∏–º—É–º 3
        (1, 3),  # –≥—Ä—É–ø–ø–∞ 1, –º–∞–∫—Å–∏–º—É–º 3
        (3, 2),  # –≥—Ä—É–ø–ø–∞ 3, –º–∞–∫—Å–∏–º—É–º 2
        (2, 2),  # –≥—Ä—É–ø–ø–∞ 2, –º–∞–∫—Å–∏–º—É–º 2
    ]
    
    for group_size, max_size in test_cases:
        keyboard = create_partial_leave_keyboard(group_size, max_size)
        print(f"–ì—Ä—É–ø–ø–∞ {group_size}, –º–∞–∫—Å–∏–º—É–º {max_size}:")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
        leave_buttons = 0
        for row in keyboard.inline_keyboard:
            for button in row:
                if button.text.startswith("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è") and "—á–µ–ª" in button.text:
                    leave_buttons += 1
                elif button.text == "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –≤—Å–µ–π –≥—Ä—É–ø–ø–æ–π":
                    print(f"  ‚úÖ –ö–Ω–æ–ø–∫–∞: {button.text}")
        
        print(f"  –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø–∏—Å–∫–∏: {leave_buttons}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
        expected_buttons = min(group_size, max_size)
        if leave_buttons == expected_buttons:
            print(f"  ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫")
        else:
            print(f"  ‚ùå –û–∂–∏–¥–∞–ª–æ—Å—å {expected_buttons}, –ø–æ–ª—É—á–µ–Ω–æ {leave_buttons}")
    
    print("‚úÖ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —á–∞—Å—Ç–∏—á–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    print("‚è∞ –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–æ—Ç–ø–∏—Å–∫–∏")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∞–≤—Ç–æ–æ—Ç–ø–∏—Å–∫–∏
    training_time = datetime.strptime(BOT_SETTINGS['TRAINING_TIME'], '%H:%M').time()
    auto_leave_time = datetime.strptime(BOT_SETTINGS['AUTO_LEAVE_TIME'], '%H:%M').time()
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É
    training_minutes = training_time.hour * 60 + training_time.minute
    auto_leave_minutes = auto_leave_time.hour * 60 + auto_leave_time.minute
    difference_minutes = training_minutes - auto_leave_minutes
    
    print(f"–í—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {training_time}")
    print(f"–í—Ä–µ–º—è –∞–≤—Ç–æ–æ—Ç–ø–∏—Å–∫–∏: {auto_leave_time}")
    print(f"–†–∞–∑–Ω–∏—Ü–∞: {difference_minutes} –º–∏–Ω—É—Ç (–∑–∞ {difference_minutes//60} —á {difference_minutes%60} –º–∏–Ω –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)")
    
    if difference_minutes == 60:
        print("‚úÖ –ê–≤—Ç–æ–æ—Ç–ø–∏—Å–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞ 1 —á–∞—Å –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    else:
        print(f"‚ùå –ê–≤—Ç–æ–æ—Ç–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∑–∞ 1 —á–∞—Å –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    
    print("‚úÖ –ê–≤—Ç–æ–æ—Ç–ø–∏—Å–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    print("üîß –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥...")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ —Å —Ä–∞–∑–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º—É–º–∞
    result_big = event_service.join_event_with_group(event_id, 1004, 5, "user4", "–ê–ª–µ–∫—Å–µ–π", "–ê–ª–µ–∫—Å–µ–µ–≤")
    print(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø—ã –∏–∑ 5 —á–µ–ª–æ–≤–µ–∫: {'‚ùå' if not result_big['success'] else '‚ö†Ô∏è'}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏
    result_duplicate = event_service.join_event_with_group(event_id, 1001, 1, "user1", "–ò–≤–∞–Ω", "–ò–≤–∞–Ω–æ–≤")
    print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏: {'‚ùå' if not result_duplicate['success'] else '‚ö†Ô∏è'}")
    
    print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")
    
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    participants = db.get_event_participants(event_id)
    total_people = sum(p.get('group_size', 1) for p in participants)
    confirmed_people = sum(p.get('main_group_size', 1) for p in participants if p['status'] in ['confirmed', 'mixed'])
    reserve_people = sum(p.get('reserve_group_size', 0) for p in participants if p['status'] in ['reserve', 'mixed'])
    
    print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(participants)}")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: {total_people}")
    print(f"–í –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ—Å—Ç–∞–≤–µ: {confirmed_people}")
    print(f"–í —Ä–µ–∑–µ—Ä–≤–µ: {reserve_people}")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –≥—Ä—É–ø–ø
    group_sizes = {}
    for p in participants:
        size = p.get('group_size', 1)
        group_sizes[size] = group_sizes.get(size, 0) + 1
    
    print("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –≥—Ä—É–ø–ø:")
    for size, count in sorted(group_sizes.items()):
        print(f"  {size} —á–µ–ª–æ–≤–µ–∫: {count} –≥—Ä—É–ø–ø")
    
    print("\nüéâ –í–°–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ü–†–û–í–ï–†–ï–ù–´!")
    print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

if __name__ == "__main__":
    test_final_requirements() 