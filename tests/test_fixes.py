#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from data.database import Database
from services.event_service import EventService

def test_all_fixes():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
    db = Database()
    event_service = EventService(db)
    
    # === –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ===
    print("üî¢ –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    
    active_events = event_service.get_active_events()
    if not active_events:
        print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    event = active_events[0]
    event_id = event['id']
    current_limit = event['max_participants']
    
    print(f"üìÖ –°–æ–±—ã—Ç–∏–µ: {event['name']}")
    print(f"üÜî ID —Å–æ–±—ã—Ç–∏—è: {event_id}")
    print(f"üë• –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {current_limit}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
    new_limit = current_limit + 2
    result = event_service.change_participant_limit(event_id, new_limit)
    
    if result['success']:
        print("‚úÖ –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        print(f"üìä –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–æ—Å—Ç–∞–≤: {len(result['moved_to_main'])}")
        print(f"üìä –ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ —Ä–µ–∑–µ—Ä–≤: {len(result['moved_to_reserve'])}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–∏–º–∏—Ç –æ–±—Ä–∞—Ç–Ω–æ
        result_back = event_service.change_participant_limit(event_id, current_limit)
        if result_back['success']:
            print("‚úÖ –õ–∏–º–∏—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –ª–∏–º–∏—Ç–∞: {result_back['message']}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: {result['message']}")
    
    # === –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ +1/+2 ===
    print("\nüë• –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–ø–∏—Å–∏")
    
    # –í–∫–ª—é—á–∞–µ–º –≥—Ä—É–ø–ø–æ–≤—É—é –∑–∞–ø–∏—Å—å
    db.set_bot_setting('group_registration_enabled', 'true')
    db.set_bot_setting('max_group_size', '3')
    
    print(f"‚úÖ –ó–∞–ø–∏—Å—å –≥—Ä—É–ø–ø–∞–º–∏ –≤–∫–ª—é—á–µ–Ω–∞: {db.is_group_registration_enabled()}")
    print(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã: {db.get_max_group_size()}")
    
    # –û—á–∏—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
    participants = db.get_event_participants(event_id)
    for participant in participants:
        db.remove_participant(event_id, participant['telegram_id'])
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –≥—Ä—É–ø–ø (–∏–º–∏—Ç–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ +1/+2)
    test_users = [
        (1001, 1, "user1", "–ò–≤–∞–Ω", "–ò–≤–∞–Ω–æ–≤"),  # 1 —á–µ–ª–æ–≤–µ–∫
        (1002, 2, "user2", "–ü–µ—Ç—Ä", "–ü–µ—Ç—Ä–æ–≤"),  # +1 (2 —á–µ–ª–æ–≤–µ–∫–∞)
        (1003, 3, "user3", "–°–µ—Ä–≥–µ–π", "–°–µ—Ä–≥–µ–µ–≤"),  # +2 (3 —á–µ–ª–æ–≤–µ–∫–∞)
    ]
    
    for telegram_id, group_size, username, first_name, last_name in test_users:
        result = event_service.join_event_with_group(
            event_id, telegram_id, group_size, username, first_name, last_name
        )
        print(f"–ó–∞–ø–∏—Å—å {first_name} (–≥—Ä—É–ø–ø–∞ {group_size}): {result['success']}")
        if not result['success']:
            print(f"   –û—à–∏–±–∫–∞: {result['message']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    print("\nüë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø–∏—Å–∏:")
    participants_list = event_service.get_participants_list(event_id, event)
    print(participants_list)
    
    # === –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –≥—Ä—É–ø–ø ===
    print("\nüö™ –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –≥—Ä—É–ø–ø")
    
    # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ 2 —á–µ–ª–æ–≤–µ–∫
    leave_result = event_service.leave_group(event_id, 1002, 2)
    print(f"–û—Ç–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø—ã –ü–µ—Ç—Ä–∞ (2 —á–µ–ª): {leave_result['success']}")
    
    # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    leave_result2 = event_service.leave_event(event_id, 1001)
    print(f"–û—Ç–ø–∏—Å–∫–∞ –ò–≤–∞–Ω–∞ (1 —á–µ–ª): {leave_result2['success']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–ø–∏—Å–∫–∏
    print("\nüë• –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø–∏—Å–∫–∏:")
    participants_list = event_service.get_participants_list(event_id, event)
    print(participants_list)
    
    # === –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ===
    print("\nüîß –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    settings = {
        'group_registration_enabled': db.is_group_registration_enabled(),
        'max_group_size': db.get_max_group_size(),
    }
    
    for key, value in settings.items():
        print(f"‚úÖ {key}: {value}")
    
    # === –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ===
    print("\nüëë –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = db.get_total_users_count()
    participants = db.get_event_participants(event_id)
    participants_count = len(participants)
    
    print(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    print(f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏–∏: {participants_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –ø–æ ID
    event_found = event_service.get_event_by_id(event_id)
    if event_found:
        print(f"‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID: {event_found['name']}")
    else:
        print("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ ID")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

if __name__ == "__main__":
    test_all_fixes() 