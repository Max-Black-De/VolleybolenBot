#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–æ—Ç–∞
"""

import sys
import os
import subprocess
import time

def run_test(test_file):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\n{'='*60}")
    print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_file}")
    print(f"{'='*60}")
    
    try:
        result = subprocess.run(
            [sys.executable, test_file],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        if result.returncode == 0:
            print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
            print(result.stdout)
            return True
        else:
            print("‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
            print("STDOUT:", result.stdout)
            print("STDERR:", result.stderr)
            return False
            
    except subprocess.TimeoutExpired:
        print("‚è∞ –¢–µ—Å—Ç –ø—Ä–µ–≤—ã—Å–∏–ª –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (30 —Å–µ–∫)")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

def main():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Volleyball Training Bot")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    tests = [
        "tests/test_group_registration.py",
        "tests/test_comprehensive_groups.py", 
        "tests/test_admin_group_functions.py",
        "tests/test_integration.py"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    existing_tests = []
    for test in tests:
        if os.path.exists(test):
            existing_tests.append(test)
        else:
            print(f"‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test}")
    
    if not existing_tests:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞!")
        return
    
    print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {len(existing_tests)}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    passed = 0
    failed = 0
    
    for test in existing_tests:
        if run_test(test):
            passed += 1
        else:
            failed += 1
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print(f"{'='*60}")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìà –í—Å–µ–≥–æ: {passed + failed}")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print(f"\n‚ö†Ô∏è {failed} —Ç–µ—Å—Ç(–æ–≤) –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
    
    print(f"\n–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {time.strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    main() 