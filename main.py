import logging
import locale
import os
from datetime import time
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

from config.secure import secrets
from config.settings import MESSAGES, ADMIN_IDS
from data.database import Database
from services.event_service import EventService
from services.notification_service import NotificationService
from utils.keyboard import create_main_keyboard, get_is_joined
from handlers.start_handler import handle_start
from handlers.event_handler import handle_event_actions
from handlers.admin_handler import handle_admin_commands

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞—Ç—ã
locale.setlocale(locale.LC_TIME, 'C')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
logs_path = os.getenv('LOGS_PATH', 'logs')
if not os.path.exists(logs_path):
    os.makedirs(logs_path, exist_ok=True)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(logs_path, 'bot.log'), encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logging.getLogger().setLevel(logging.DEBUG)
logging.getLogger("services.event_service").setLevel(logging.DEBUG)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
TOKEN = secrets.get('BOT_API_TOKEN')
if not TOKEN:
    raise ValueError("BOT_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config/secure.py")

# –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ TOKEN –Ω–µ None –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
assert TOKEN is not None, "BOT_API_TOKEN –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å None"

db = Database()
event_service = EventService(db)

class VolleyballBot:
    def __init__(self):
        # TOKEN —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –æ–Ω —Ç–æ—á–Ω–æ –Ω–µ None
        # assert –≤—ã—à–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —á—Ç–æ TOKEN –Ω–µ None
        self.application = ApplicationBuilder().token(TOKEN).build()
        self.db = Database()
        self.event_service = EventService(self.db)
        self.notification_service = NotificationService(self.application.bot, self.db)
        
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_handler))
        self.application.add_handler(CommandHandler("admin", self.admin_handler))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        self.application.add_handler(CallbackQueryHandler(self.callback_handler))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.message_handler))

    def setup_jobs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        job_queue = self.application.job_queue
        if not job_queue:
            logger.warning("Job queue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        from pytz import timezone
        tz = timezone('Asia/Yekaterinburg')
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (–≤—Ç–æ—Ä–Ω–∏–∫ –∏ –ø—è—Ç–Ω–∏—Ü–∞ –≤ 17:00)
        job_queue.run_daily(self.create_scheduled_events, time(hour=17, minute=0, tzinfo=tz), days=(2, 4))  # 1=–≤—Ç–æ—Ä–Ω–∏–∫, 4=–ø—è—Ç–Ω–∏—Ü–∞
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 2 —á–∞—Å–∞ –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        job_queue.run_daily(self.send_presence_reminders, time(hour=18, minute=0, tzinfo=tz), days=(4, 6))  # 3=—á–µ—Ç–≤–µ—Ä–≥, 6=–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ 1:05 –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        job_queue.run_daily(self.send_second_reminders, time(hour=18, minute=55, tzinfo=tz), days=(4, 6))
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        job_queue.run_daily(self.auto_leave_unconfirmed, time(hour=19, minute=0, tzinfo=tz), days=(4, 6))
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 21:59
        job_queue.run_daily(self.cleanup_past_events, time(hour=21, minute=59, tzinfo=tz), days=(4, 6))
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        job_queue.run_once(self.create_initial_event, 0)

    async def start_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await handle_start(update, context, self.event_service, self.notification_service, self.db)

    async def admin_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥"""
        if not update.effective_user:
            logger.warning("admin_handler: –Ω–µ—Ç effective_user")
            return
        user_id = update.effective_user.id
        logger.info(f"admin_handler: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")
        logger.info(f"admin_handler: ADMIN_IDS = {ADMIN_IDS}")
        if user_id not in ADMIN_IDS:
            logger.warning(f"admin_handler: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            if update.message:
                await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        logger.info(f"admin_handler: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é")
        await handle_admin_commands(update, context, self.event_service, self.notification_service, self.db)

    async def callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
        if not update.callback_query:
            return
        query = update.callback_query
        await query.answer()
        
        if not query.data:
            return
        data = query.data.split('_')
        action = data[0]
        
        if action in ['confirm', 'cancel']:
            await self.handle_leave_confirmation_callback(update, context, data)
        elif action in ['confirm_presence', 'decline_presence']:
            await self.handle_presence_confirmation_callback(update, context, data)
        elif action == 'confirm_leave':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π
            await self.handle_leave_confirmation_callback(update, context, ['confirm'] + data[1:])

    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.text:
            return
        text = update.message.text
        if not update.effective_user:
            return
        user = update.effective_user
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_data –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if context.user_data is None:
            context.user_data = {}
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
        if user.id in ADMIN_IDS and context.user_data.get('admin_state'):
            await handle_admin_commands(update, context, self.event_service, self.notification_service, self.db)
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await handle_event_actions(update, context, text, self.event_service, self.notification_service, self.db)

    async def handle_leave_confirmation_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        if not query:
            return
            
        action = data[0]
        event_id = int(data[2])
        telegram_id = int(data[3])
        
        if action == "cancel":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª
            event_info = self.event_service.get_event_by_id(event_id)
            participants_list = self.event_service.get_participants_list(event_id, event_info)
            await query.edit_message_text(f"–í—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏!ü•≥\n\n{participants_list}")
            return
        
        elif action == "confirm_presence":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ
            success = self.event_service.confirm_presence(event_id, telegram_id)
            if success:
                await query.edit_message_text("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                event_info = self.event_service.get_event_by_id(event_id)
                participants_list = self.event_service.get_participants_list(event_id, event_info)
                await self.application.bot.send_message(
                    chat_id=telegram_id,
                    text=participants_list
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                is_joined = get_is_joined(self.db, self.event_service, telegram_id)
                await self.application.bot.send_message(
                    chat_id=telegram_id,
                    text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                    reply_markup=create_main_keyboard(is_joined=is_joined)
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è")
            return
        
        elif action == "confirm":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ—Ç–ø–∏—Å–∫—É ‚Äî —Å—Ä–∞–∑—É –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º
            user = update.effective_user
            if not user:
                return
            result = self.event_service.leave_event(event_id, telegram_id)
            if result['success']:
                await query.edit_message_text(result['message'])
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                await self.notification_service.send_participants_update(
                    event_id, telegram_id, user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id}", "–æ—Ç–ø–∏—Å–∞–ª—Å—è"
                )
                # –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞, —É–≤–µ–¥–æ–º–ª—è–µ–º –µ–≥–æ
                if result.get('moved_participant'):
                    moved_user = result['moved_participant']
                    await self.notification_service.send_moved_to_main_notification(
                        moved_user['telegram_id'], moved_user['username']
                    )
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ—Å–ª–µ –æ—Ç–ø–∏—Å–∫–∏
                is_joined = get_is_joined(self.db, self.event_service, telegram_id)
                await self.application.bot.send_message(
                    chat_id=telegram_id,
                    text="–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!",
                    reply_markup=create_main_keyboard(is_joined=is_joined)
                )
            else:
                await query.edit_message_text(result['message'])
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–∏—Å–∞–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                is_joined = get_is_joined(self.db, self.event_service, telegram_id)
                await self.application.bot.send_message(
                    chat_id=telegram_id,
                    text="–í–∞—à–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.",
                    reply_markup=create_main_keyboard(is_joined=is_joined)
                )

    async def handle_presence_confirmation_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: list):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è"""
        query = update.callback_query
        if not query:
            return
            
        action = data[0]
        event_id = int(data[2])
        telegram_id = int(data[3])
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_data –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if context.user_data is None:
            context.user_data = {}
        
        if action == "confirm_presence":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ
            success = self.event_service.confirm_presence(event_id, telegram_id)
            if success:
                await query.edit_message_text("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ! –£–≤–∏–¥–∏–º—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                event_info = self.event_service.get_event_by_id(event_id)
                participants_list = self.event_service.get_participants_list(event_id, event_info)
                await self.application.bot.send_message(
                    chat_id=telegram_id,
                    text=participants_list
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                is_joined = get_is_joined(self.db, self.event_service, telegram_id)
                await self.application.bot.send_message(
                    chat_id=telegram_id,
                    text="–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
                    reply_markup=create_main_keyboard(is_joined=is_joined)
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è")
        
        elif action == "decline_presence":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è, –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø–∏—Å–∫–∏
            await query.edit_message_text(MESSAGES['leave_text_confirmation'])
            context.user_data['pending_leave_confirmation'] = {
                'event_id': event_id,
                'telegram_id': telegram_id
            }
    
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
    async def create_scheduled_events(self, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
        try:
            event_ids = self.event_service.create_scheduled_events()
            
            for event_id in event_ids:
                event = self.event_service.get_event_by_id(event_id)
                if event:
                    await self.notification_service.send_event_notification(event_id, event['name'])
                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –∏ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event_id}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {e}")
    
    async def create_initial_event(self, context: ContextTypes.DEFAULT_TYPE):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            event_ids = self.event_service.create_scheduled_events()
            
            for event_id in event_ids:
                event = self.event_service.get_event_by_id(event_id)
                if event:
                    await self.notification_service.send_event_notification(event_id, event['name'])
                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –∏ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ {event_id}")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è: {e}")
    
    async def send_presence_reminders(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è"""
        try:
            active_events = self.event_service.get_active_events()
            
            for event in active_events:
                participants = self.event_service.get_participants_for_reminder(event['id'], 'first')
                
                for participant in participants:
                    await self.notification_service.send_presence_reminder(
                        event['id'], participant['telegram_id'], event['name'], 'first'
                    )
                    self.event_service.mark_reminder_sent(event['id'], participant['telegram_id'], 'first')
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def send_second_reminders(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            active_events = self.event_service.get_active_events()
            
            for event in active_events:
                participants = self.event_service.get_participants_for_reminder(event['id'], 'second')
                
                for participant in participants:
                    await self.notification_service.send_presence_reminder(
                        event['id'], participant['telegram_id'], event['name'], 'second'
                    )
                    self.event_service.mark_reminder_sent(event['id'], participant['telegram_id'], 'second')
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def auto_leave_unconfirmed(self, context: ContextTypes.DEFAULT_TYPE):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø–∏—Å–∫–∞ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        try:
            active_events = self.event_service.get_active_events()
            
            for event in active_events:
                # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø–∏—Å–∫–∏
                unconfirmed = self.event_service.get_unconfirmed_participants(event['id'])
                
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø–∏—Å–∫–µ
                for participant in unconfirmed:
                    await self.notification_service.send_auto_leave_notification(
                        participant['telegram_id'], event['name']
                    )
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø–∏—Å—ã–≤–∞–µ–º –∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–∞
                moved_participants = self.event_service.auto_leave_unconfirmed(event['id'])
                
                # –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                for participant in unconfirmed:
                    from utils.keyboard import create_main_keyboard, get_is_joined
                    is_joined = get_is_joined(self.db, self.event_service, participant['telegram_id'])
                    await self.application.bot.send_message(
                        chat_id=participant['telegram_id'],
                        text="–í—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!",
                        reply_markup=create_main_keyboard(is_joined=is_joined)
                    )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–µ—Ä–µ–º–µ—â–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                for moved_participant in moved_participants:
                    await self.notification_service.send_moved_to_main_notification(
                        moved_participant['telegram_id'], moved_participant['username']
                    )
                
                # –ï—Å–ª–∏ –≤ —Ä–µ–∑–µ—Ä–≤–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, —É–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö
                if not moved_participants:
                    await self.notification_service.send_no_reserve_notification(event['id'])
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø–∏—Å–∫–µ: {e}")
    
    async def cleanup_past_events(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
        try:
            self.event_service.cleanup_past_events()
            logger.info("–ü—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å–æ–±—ã—Ç–∏–π: {e}")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–¥–∞—á–∏
        self.setup_handlers()
        self.setup_jobs()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        self.application.run_polling()

if __name__ == "__main__":
    bot = VolleyballBot()
    bot.run() 