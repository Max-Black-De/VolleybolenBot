from typing import Optional
import logging
from telegram import Update
from telegram.ext import ContextTypes
from services.event_service import EventService
from services.notification_service import NotificationService
from services.chat_history_service import ChatHistoryService
from data.database import Database
from utils.keyboard import create_main_keyboard, create_leave_confirmation_keyboard, create_group_size_keyboard, create_group_leave_keyboard, create_partial_leave_keyboard
from config.settings import MESSAGES

logger = logging.getLogger(__name__)

async def handle_event_actions(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, 
                              event_service: EventService, notification_service: NotificationService, 
                              db: Database, chat_history_service: Optional[ChatHistoryService] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ–±—ã—Ç–∏—è–º–∏"""
    if not update.message:
        return
        
    user = update.effective_user
    if not user:
        return
        
    text = text.strip()
    user_data = context.user_data if context.user_data is not None else {}
    current_state = user_data.get('current_state')
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    active_events = event_service.get_active_events()
    if not active_events:
        await update.message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    current_event = active_events[0]
    event_id = current_event['id']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    participant = db.get_participant(event_id, user.id)
    is_joined = participant is not None
    
    # --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–∫–∞–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏ ---
    async def reset_and_show_keyboard():
        user_data.pop('current_state', None)
        if db and event_id and user and hasattr(user, 'id'):
            await show_actual_keyboard(update, db, event_id, user.id)
    # ---
    

    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if text == "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        await handle_show_participants(update, context, event_service, event_id)
        await reset_and_show_keyboard()
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø–∞–º–∏
    if current_state == 'choosing_group_size':
        await handle_group_size_selection(update, context, text, event_service, notification_service, event_id, user, chat_history_service, db)
        return
    elif current_state == 'choosing_partial_leave':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ participant —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not participant:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.")
            await reset_and_show_keyboard()
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
        try:
            # –ò—â–µ–º —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç–µ
            import re
            match = re.search(r'(\d+)', text)
            if match:
                reduce_by = int(match.group(1))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∏—Å–ª–æ –Ω–µ –±–æ–ª—å—à–µ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
                if reduce_by > participant.get('group_size', 1):
                    await update.message.reply_text(f"‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ –ª—é–¥–µ–π, —á–µ–º –≤ –≥—Ä—É–ø–ø–µ ({participant.get('group_size', 1)}).")
                    return
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω—É—é –æ—Ç–ø–∏—Å–∫—É
                result = event_service.reduce_group_size(event_id, user.id, reduce_by)
                await update.message.reply_text(result['message'])
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                updated_participant = db.get_participant(event_id, user.id)
                
                # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –æ—Å—Ç–∞–ª—Å—è 1 —á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ –º–µ–Ω—å—à–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                if not updated_participant or updated_participant.get('group_size', 1) <= 1:
                    user_data.pop('current_state', None)
                    await show_actual_keyboard(update, db, event_id, user.id)
                else:
                    # –ï—Å–ª–∏ –≤ –≥—Ä—É–ø–ø–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ 1, –º–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ —á–∞—Å—Ç–∏—á–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
                    await update.message.reply_text(
                        f"–í –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ –æ—Å—Ç–∞–ª–æ—Å—å {updated_participant.get('group_size', 1)} —á–µ–ª–æ–≤–µ–∫. –•–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å –µ—â—ë –∫–æ–≥–æ-—Ç–æ?",
                        reply_markup=create_partial_leave_keyboard(updated_participant.get('group_size', 1), db.get_max_group_size() if db else 3)
                    )
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —á–∏—Å–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
                if participant and participant.get('group_size', 1) > 1:
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:",
                        reply_markup=create_partial_leave_keyboard(participant.get('group_size', 1), db.get_max_group_size() if db else 3)
                    )
                else:
                    await reset_and_show_keyboard()
                    
        except (ValueError, IndexError):
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
            if participant and participant.get('group_size', 1) > 1:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏:",
                    reply_markup=create_partial_leave_keyboard(participant.get('group_size', 1), db.get_max_group_size() if db else 3)
                )
            else:
                await reset_and_show_keyboard()
        return
    elif current_state == 'choosing_leave_type':
        await handle_leave_type_selection(update, context, text, event_service, notification_service, event_id, user, db)
        await reset_and_show_keyboard()
        return
    
    if text == "–ò–¥—É –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å –≥—Ä—É–ø–ø–∞–º–∏
        if db and db.is_group_registration_enabled():
            user_data['current_state'] = 'choosing_group_size'
            max_group_size = db.get_max_group_size()
            await update.message.reply_text(
                f"üë• –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã (–º–∞–∫—Å–∏–º—É–º {max_group_size} —á–µ–ª–æ–≤–µ–∫):"
            )
            return
        else:
            await handle_join_event(update, context, event_service, notification_service, event_id, user, chat_history_service)
            await show_actual_keyboard(update, db, event_id, user.id)
    
    elif text == "–ü–µ—Ä–µ–¥—É–º–∞–ª! –û—Ç–ø–∏—Å—ã–≤–∞—é—Å—å(":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∑–∞–ø–∏—Å—å –≥—Ä—É–ø–ø–∞–º–∏ –∏ –µ—Å—Ç—å –ª–∏ –≥—Ä—É–ø–ø–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if db.is_group_registration_enabled() and participant and participant.get('group_size', 1) > 1:
            user_data['current_state'] = 'choosing_partial_leave'
            group_size = participant.get('group_size', 1)
            max_group_size = db.get_max_group_size() if db else 3
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏: –≥—Ä—É–ø–ø–∞ –∏–∑ {group_size} —á–µ–ª–æ–≤–µ–∫")
            
            keyboard = create_partial_leave_keyboard(group_size, max_group_size)

            
            await update.message.reply_text(
                f"üë• –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –æ—Ç–ø–∏—Å–∞—Ç—å? (–≥—Ä—É–ø–ø–∞ –∏–∑ {group_size})",
                reply_markup=keyboard
            )

            await reset_and_show_keyboard()
        else:
            await handle_leave_event(update, context, event_service, notification_service, event_id, user)
            await show_actual_keyboard(update, db, event_id, user.id)
    
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.")
        await reset_and_show_keyboard()

async def handle_join_event(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                           event_service: EventService, notification_service: NotificationService, 
                           event_id: int, user, chat_history_service: Optional[ChatHistoryService] = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ"""
    if not update.message:
        return
        
    db = event_service.db if hasattr(event_service, 'db') else None
    try:
        result = event_service.join_event(
            event_id, 
            user.id, 
            user.username, 
            user.first_name, 
            user.last_name
        )
        
        if result['success']:
            await update.message.reply_text(result['message'])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if chat_history_service:
                chat_history_service.save_bot_message(user.id, result['message'], event_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
            event_info = event_service.get_event_by_id(event_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants_list = event_service.get_participants_list(event_id, event_info)
            await update.message.reply_text(participants_list)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if chat_history_service:
                chat_history_service.save_bot_message(user.id, participants_list, event_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            await notification_service.send_participants_update(
                event_id, user.id, user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}", "–∑–∞–ø–∏—Å–∞–ª—Å—è"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            if db and event_id and user and hasattr(user, 'id'):
                await show_actual_keyboard(update, db, event_id, user.id)
        else:
            await update.message.reply_text(
                result['message'],
                reply_markup=create_main_keyboard(is_joined=True)
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if chat_history_service:
                chat_history_service.save_bot_message(user.id, result['message'], event_id)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {e}", exc_info=True)
        await notification_service.send_error_notification(user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ")
        if db and event_id and user and hasattr(user, 'id'):
            await show_actual_keyboard(update, db, event_id, user.id)

async def handle_leave_event(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                            event_service: EventService, notification_service: NotificationService, 
                            event_id: int, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–æ–±—ã—Ç–∏—è (—Å –∫–Ω–æ–ø–æ—á–Ω—ã–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º)"""
    if not update.message:
        return
    db = event_service.db if hasattr(event_service, 'db') else None
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = create_leave_confirmation_keyboard(event_id=event_id, telegram_id=user.id)
        
        await update.message.reply_text(
            MESSAGES['leave_confirmation'],
            reply_markup=keyboard
        )
        if db and event_id and user and hasattr(user, 'id'):
            await show_actual_keyboard(update, db, event_id, user.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —Å–æ–±—ã—Ç–∏—è: {e}", exc_info=True)
        await notification_service.send_error_notification(user.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –æ—Ç —Å–æ–±—ã—Ç–∏—è")
        if db and event_id and user and hasattr(user, 'id'):
            await show_actual_keyboard(update, db, event_id, user.id)

async def handle_show_participants(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                  event_service: EventService, event_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    if not update.message:
        return
        
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
        event_info = event_service.get_event_by_id(event_id)
        
        participants_list = event_service.get_participants_list(event_id, event_info)
        await update.message.reply_text(participants_list)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}", exc_info=True)
        db = event_service.db if hasattr(event_service, 'db') else None
        user = update.effective_user
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        if db and event_id and user and hasattr(user, 'id'):
            await show_actual_keyboard(update, db, event_id, user.id)

async def handle_show_chat_history(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
    if not update.message:
        return
        
    user = update.effective_user
    if not user:
        return
        
    try:
        chat_history_service = ChatHistoryService(db)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–¥–∞–≤–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
        recent_history = chat_history_service.get_recent_history(user.id, 24)
        
        if recent_history:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            history_text = chat_history_service.format_history_for_display(recent_history)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = chat_history_service.get_history_stats(user.id)
            stats_text = f"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {stats['recent_total']}"
            
            await update.message.reply_text(history_text + stats_text)
        else:
            await update.message.reply_text("üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ —Å –±–æ—Ç–æ–º!")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞")
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º show_actual_keyboard, –µ—Å–ª–∏ event_id –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω

async def show_actual_keyboard(update: Update, db: Database, event_id: int, user_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –µ–≥–æ —Å—Ç–∞—Ç—É—Å—É –≤ –±–∞–∑–µ"""
    if not update.message:
        return
    participant = db.get_participant(event_id, user_id)
    is_joined = participant is not None
    keyboard = create_main_keyboard(is_joined=is_joined)
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
    await update.message.reply_text(
        "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
        reply_markup=keyboard
    )

async def handle_group_size_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str,
                                     event_service: EventService, notification_service: NotificationService,
                                     event_id: int, user, chat_history_service: Optional[ChatHistoryService], db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    if not update.message:
        return
    try:
        max_group_size = db.get_max_group_size() if db else 3
        group_size = None
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        import re
        match = re.search(r'(\d+)', text)
        if match:
            group_size = int(match.group(1))
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞
        if text.startswith("+1"):
            group_size = 2
        elif text.startswith("+2"):
            group_size = 3
        elif text.startswith("+3"):
            group_size = 4
        elif text.startswith("1 —á–µ–ª–æ–≤–µ–∫"):
            group_size = 1
        if group_size is None or group_size < 1 or group_size > max_group_size:
            await update.message.reply_text(
                f"‚ùå –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {max_group_size} —á–µ–ª–æ–≤–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {max_group_size}:"
            )
            # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã
            user_data = context.user_data if context.user_data is not None else {}
            user_data['current_state'] = 'choosing_group_size'
            return
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º –≥—Ä—É–ø–ø—ã
        result = event_service.join_event_with_group(
            event_id, 
            user.id, 
            group_size,
            user.username, 
            user.first_name, 
            user.last_name
        )
        
        if result['success']:
            group_text = f" (–≥—Ä—É–ø–ø–∞ –∏–∑ {group_size} —á–µ–ª–æ–≤–µ–∫)" if group_size > 1 else ""
            await update.message.reply_text(result['message'] + group_text)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if chat_history_service:
                chat_history_service.save_bot_message(user.id, result['message'] + group_text, event_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏
            event_info = event_service.get_event_by_id(event_id)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants_list = event_service.get_participants_list(event_id, event_info)
            await update.message.reply_text(participants_list)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if chat_history_service:
                chat_history_service.save_bot_message(user.id, participants_list, event_id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            group_info = f" (–≥—Ä—É–ø–ø–∞ –∏–∑ {group_size})" if group_size > 1 else ""
            await notification_service.send_participants_update(
                event_id, user.id, (user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}") + group_info, "–∑–∞–ø–∏—Å–∞–ª—Å—è"
            )
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–ø–∏—Å–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_data = context.user_data if context.user_data is not None else {}
            user_data.pop('current_state', None)
            if db and event_id and user and hasattr(user, 'id'):
                await show_actual_keyboard(update, db, event_id, user.id)
        else:
            await update.message.reply_text(result['message'])
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            if chat_history_service:
                chat_history_service.save_bot_message(user.id, result['message'], event_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã: {e}", exc_info=True)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        if db and event_id and user and hasattr(user, 'id'):
            await show_actual_keyboard(update, db, event_id, user.id)



async def handle_leave_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str,
                                     event_service: EventService, notification_service: NotificationService,
                                     event_id: int, user, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–ø–∏—Å–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    if not update.message:
        return
    
    user_data = context.user_data if context.user_data is not None else {}
    
    if text == "üîô –û—Ç–º–µ–Ω–∞":
        user_data.pop('current_state', None)
        await update.message.reply_text(
            "–û—Ç–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=create_main_keyboard(is_joined=True)
        )
        await show_actual_keyboard(update, db, event_id, user.id)
        return
    
    participant = db.get_participant(event_id, user.id)
    if not participant:
        await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ.")
        user_data.pop('current_state', None)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Å—Ç–∞—Ç—É—Å—É
        await show_actual_keyboard(update, db, event_id, user.id)
        return
    
    group_size = participant.get('group_size', 1)
    
    if text == "üë§ –û—Ç–ø–∏—Å–∞—Ç—å –æ–¥–Ω–æ–≥–æ":
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        result = event_service.leave_event(event_id, user.id)
        if result['success']:
            await update.message.reply_text("‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Å–æ–±—ã—Ç–∏—è.")
            user_data.pop('current_state', None)
            await show_actual_keyboard(update, db, event_id, user.id)
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
        return

    elif text == "üë• –û—Ç–ø–∏—Å–∞—Ç—å –≤—Å–µ—Ö":
        # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—é –≥—Ä—É–ø–ø—É
        result = event_service.leave_group(event_id, user.id, group_size)
        if result['success']:
            group_text = f" (–≥—Ä—É–ø–ø–∞ –∏–∑ {group_size} —á–µ–ª–æ–≤–µ–∫)" if group_size > 1 else ""
            await update.message.reply_text(f"‚úÖ –í—Å—è –≥—Ä—É–ø–ø–∞ –æ—Ç–ø–∏—Å–∞–Ω–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è{group_text}.")
            user_data.pop('current_state', None)
            await show_actual_keyboard(update, db, event_id, user.id)
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
        return
    
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–π –æ—Ç–ø–∏—Å–∫–∏
        from utils.keyboard import create_partial_leave_keyboard
        await update.message.reply_text(
            f"üë• –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ (–≥—Ä—É–ø–ø–∞ –∏–∑ {group_size}):",
            reply_markup=create_partial_leave_keyboard(group_size, db.get_max_group_size() if db else 3)
        )
        return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    user_data.pop('current_state', None)
    await update.message.reply_text(
        "–û–±–Ω–æ–≤–ª–µ–Ω–æ", 
        reply_markup=create_main_keyboard(is_joined=False)
    )
    await show_actual_keyboard(update, db, event_id, user.id)

    if text == "üîô –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º":
        user_data.pop('admin_state', None)
        await update.message.reply_text(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞."
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        participant = db.get_participant(event_service.get_next_event_id(), user.id) if db else None
        is_joined = participant is not None
        await update.message.reply_text(
            "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            reply_markup=create_main_keyboard(is_joined=is_joined)
        )
        await show_actual_keyboard(update, db, event_id, user.id)
        return 