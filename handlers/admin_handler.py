import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ContextTypes
from services.event_service import EventService
from services.notification_service import NotificationService
from data.database import Database
from utils.keyboard import create_admin_keyboard, create_event_creation_keyboard, create_settings_keyboard, create_main_keyboard, create_participant_limit_keyboard, create_group_size_keyboard
from config.settings import ADMIN_IDS
from handlers.event_handler import handle_show_chat_history

logger = logging.getLogger(__name__)


async def handle_admin_commands(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               event_service: EventService, notification_service: NotificationService, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    if not update.message or not update.message.text:
        return

    user = update.effective_user
    if not user or user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    text = update.message.text.strip()
    user_data = context.user_data if context.user_data is not None else {}
    admin_state = user_data.get('admin_state')

    if text == "/admin":
        user_data['admin_state'] = 'main'
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_admin_keyboard()
        )
        return

    if text == "üîô –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º":
        user_data.pop('admin_state', None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ
        active_events = event_service.get_active_events()
        is_joined = False
        if active_events and update.effective_user:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            next_event = active_events[0]
            participant = db.get_participant(next_event['id'], update.effective_user.id)
            is_joined = participant is not None
        
        await update.message.reply_text(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞.",
            reply_markup=create_main_keyboard(is_joined=is_joined)
        )
        return

    if admin_state == 'main':
        await handle_main_admin_menu(update, context, text, event_service, db)
    elif admin_state == 'create_event':
        await handle_create_event(update, context, text, event_service, notification_service)
    elif admin_state == 'settings':
        await handle_settings(update, context, text, db)
    elif admin_state == 'confirm_delete':
        await handle_confirm_delete(update, context, text, event_service)
    elif admin_state == 'group_settings':
        await handle_group_settings(update, context, text, db)
    elif admin_state == 'change_group_size':
        await handle_change_group_size(update, context, text, db)
    elif admin_state is None and text in [
        "üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    ]:
         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ /admin.")
    


async def handle_main_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, 
                                 event_service: EventService, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é."""
    if not update.message:
        return

    user_data = context.user_data if context.user_data is not None else {}

    if text == "üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        user_data['admin_state'] = 'create_event'
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:",
            reply_markup=create_event_creation_keyboard()
        )
    elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        await show_active_events_for_deletion(update, context, event_service)
    elif text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        await show_users_list(update, context, db)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_statistics(update, context, db)
    elif text == "üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞":
        await handle_show_chat_history(update, context, db)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        user_data['admin_state'] = 'settings'
        await update.message.reply_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:",
            reply_markup=create_settings_keyboard()
        )
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_admin_keyboard()
        )


async def handle_create_event(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, 
                             event_service: EventService, notification_service: NotificationService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    if not update.message:
        return

    user_data = context.user_data if context.user_data is not None else {}

    if text == "üîô –ù–∞–∑–∞–¥":
        user_data['admin_state'] = 'main'
        await update.message.reply_text(
            "–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:",
            reply_markup=create_admin_keyboard()
        )
        return

    try:
        event_name_part = ""
        days_offset = 0
        if text == "üèê –ß–µ—Ç–≤–µ—Ä–≥ 20:00":
            event_name_part = "–ß–µ—Ç–≤–µ—Ä–≥ 20:00"
            days_offset = (3 - datetime.now().weekday() + 7) % 7
        elif text == "üèê –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00":
            event_name_part = "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00"
            days_offset = (6 - datetime.now().weekday() + 7) % 7
        
        if event_name_part:
            target_date = datetime.now().date() + timedelta(days=days_offset)
            event_id = event_service.create_event_on_date(target_date)
            event = event_service.get_event_by_id(event_id)
            if event:
                await notification_service.send_event_notification(event_id, event['name'])
                await update.message.reply_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {event['name']}")
            else:
                 await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ.")
        elif text == "üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞":
            await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

        user_data['admin_state'] = 'main'
        await update.message.reply_text("–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=create_admin_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")


async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    if not update.message:
        return
    user_data = context.user_data if context.user_data is not None else {}
    
    if text == "üîô –ù–∞–∑–∞–¥":
        user_data['admin_state'] = 'main'
        await update.message.reply_text("–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=create_admin_keyboard())
        return
    elif text == "üë• –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        await show_active_events_for_limit_change(update, context)
        return
    elif text == "‚è∞ –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        return
    elif text == "üìÖ –î–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫":
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        return
    elif text == "üéØ –ó–∞–ø–∏—Å—å –≥—Ä—É–ø–ø–∞–º–∏":
        await show_group_registration_settings(update, context, db)
        return
    
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


async def show_active_events_for_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE, event_service: EventService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    if not update.message:
        return
    
    active_events = event_service.get_active_events()
    
    if not active_events:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    events_text = "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n\n" + "\n".join(
        [f"{i}. {event['name']} (ID: {event['id']})" for i, event in enumerate(active_events, 1)]
    )
    events_text += "\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14):"
    
    user_data = context.user_data if context.user_data is not None else {}
    user_data['admin_state'] = 'confirm_delete'
    user_data['active_events_for_deletion'] = active_events
    
    await update.message.reply_text(events_text)


async def handle_confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, event_service: EventService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø–æ ID."""
    if not update.message:
        return
    try:
        event_id = int(text)
        user_data = context.user_data if context.user_data is not None else {}
        active_events = user_data.get('active_events_for_deletion', [])
        event_to_delete = next((event for event in active_events if event['id'] == event_id), None)
        if event_to_delete:
            event_service.delete_event(event_to_delete['id'])
            await update.message.reply_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{event_to_delete['name']}' —É–¥–∞–ª–µ–Ω–æ.")
        else:
            events_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n" + "\n".join(
                [f"{event['name']} (ID: {event['id']})" for event in active_events]
            )
            await update.message.reply_text(events_text)
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14)")
    user_data = context.user_data if context.user_data is not None else {}
    user_data['admin_state'] = 'main'
    await update.message.reply_text("–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=create_admin_keyboard())


async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if not update.message:
        return
    
    users = db.get_all_users()
    
    if not users:
        await update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    users_text = f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):\n\n"
    users_list = []
    for i, user in enumerate(users[:20], 1):
        username = f"@{user['username']}" if user['username'] else "–ù–µ—Ç username"
        users_list.append(f"{i}. {user['first_name']} ({username}) - ID: {user['telegram_id']}")

    users_text += "\n".join(users_list)
    
    if len(users) > 20:
        users_text += f"\n\n... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    
    await update.message.reply_text(users_text)


async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–±—ã—Ç–∏–π, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ."""
    if not update.message:
        return
    total_users = db.get_total_users_count()
    active_events = db.get_active_events()
    total_active_events = len(active_events)
    participants_count = 0
    if active_events:
        event_id = active_events[0]['id']
        participants = db.get_event_participants(event_id)
        participants_count = len(participants)
    stat_text = (
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {total_active_events}\n"
        f"–ó–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ: {participants_count} —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤"
    )
    await update.message.reply_text(stat_text)


async def show_active_events_for_limit_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    if not update.message:
        return
    
    from services.event_service import EventService
    from data.database import Database
    db = Database()
    event_service = EventService(db)
    active_events = event_service.get_active_events()
    
    if not active_events:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞.")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ (—Å–∞–º–æ–µ –±–ª–∏–∂–∞–π—à–µ–µ)
    event = active_events[0]
    current_limit = event['max_participants']
    
    events_text = f"üìÖ –°–æ–±—ã—Ç–∏–µ: {event['name']}\n"
    events_text += f"üë• –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {current_limit} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
    events_text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:"
    
    user_data = context.user_data if context.user_data is not None else {}
    user_data['admin_state'] = 'change_participant_limit'
    user_data['current_event_id'] = event['id']
    
    await update.message.reply_text(events_text, reply_markup=create_participant_limit_keyboard())


async def handle_change_participant_limit(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, 
                                         event_service: EventService, notification_service: NotificationService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    if not update.message:
        return
    
    user_data = context.user_data if context.user_data is not None else {}
    
    if text == "üîô –ù–∞–∑–∞–¥":
        user_data['admin_state'] = 'settings'
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=create_settings_keyboard())
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "üë• 4 —É—á–∞—Å—Ç–Ω–∏–∫–∞" -> 4)
    import re
    match = re.search(r'(\d+)', text)
    if match:
        new_limit = int(match.group(1))
        event_id = user_data.get('current_event_id')
        if event_id:
            event = event_service.get_event_by_id(event_id)
            if event:
                old_limit = event['max_participants']
                result = event_service.change_participant_limit(event_id, new_limit)
                
                if result['success']:
                    await update.message.reply_text(
                        f"‚úÖ –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω —Å {old_limit} –Ω–∞ {new_limit} –¥–ª—è —Å–æ–±—ã—Ç–∏—è '{event['name']}'"
                    )
                else:
                    await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['message']}")
            else:
                await update.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
    
    user_data['admin_state'] = 'settings'
    await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=create_settings_keyboard())


async def show_group_registration_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø–∞–º–∏."""
    if not update.message:
        return
    
    is_enabled = db.is_group_registration_enabled()
    max_size = db.get_max_group_size()
    
    status_text = "‚úÖ –í–∫–ª—é—á–µ–Ω–∞" if is_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞"
    
    message = f"""üéØ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø–∞–º–∏**

üìä **–°—Ç–∞—Ç—É—Å:** {status_text}
üë• **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã:** {max_size} —á–µ–ª–æ–≤–µ–∫

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≥—Ä—É–ø–ø–∞–º–∏ (—Å–µ–±—è + –¥–µ—Ç–∏/–¥—Ä—É–∑—å—è)
‚Ä¢ –ü—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –º–æ–∂–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –≤—Å–µ—Ö –∏–∑ –≥—Ä—É–ø–ø—ã
‚Ä¢ –ï—Å–ª–∏ –≥–ª–∞–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ - –æ—Ç–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤—Å—è –≥—Ä—É–ø–ø–∞

**–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:**
‚Ä¢ –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å –≥—Ä—É–ø–ø–∞–º–∏
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã"""
    
    keyboard = [
        ["‚úÖ –í–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—ã", "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—ã"],
        ["üë• –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã"],
        ["üîô –ù–∞–∑–∞–¥"]
    ]
    from telegram import ReplyKeyboardMarkup
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    user_data = context.user_data if context.user_data is not None else {}
    user_data['admin_state'] = 'group_settings'
    
    await update.message.reply_text(message, reply_markup=reply_markup, parse_mode='Markdown')


async def handle_group_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∑–∞–ø–∏—Å–∏ –≥—Ä—É–ø–ø–∞–º–∏."""
    if not update.message:
        return
    
    user_data = context.user_data if context.user_data is not None else {}
    
    if text == "üîô –ù–∞–∑–∞–¥":
        user_data['admin_state'] = 'settings'
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=create_settings_keyboard())
        return
    elif text == "‚úÖ –í–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—ã":
        db.set_bot_setting('group_registration_enabled', 'true')
        await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –≥—Ä—É–ø–ø–∞–º–∏ –≤–∫–ª—é—á–µ–Ω–∞!")
        await show_group_registration_settings(update, context, db)
        return
    elif text == "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≥—Ä—É–ø–ø—ã":
        db.set_bot_setting('group_registration_enabled', 'false')
        await update.message.reply_text("‚ùå –ó–∞–ø–∏—Å—å –≥—Ä—É–ø–ø–∞–º–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")
        await show_group_registration_settings(update, context, db)
        return
    elif text == "üë• –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã":
        user_data['admin_state'] = 'change_group_size'
        current_size = db.get_max_group_size()
        await update.message.reply_text(
            f"üë• –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã (–æ—Ç 1 –¥–æ 5, —Ç–µ–∫—É—â–∏–π: {current_size}):"
        )
        return
    
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")


async def handle_change_group_size(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≥—Ä—É–ø–ø—ã."""
    if not update.message:
        return
    
    user_data = context.user_data if context.user_data is not None else {}
    
    if text == "üîô –û—Ç–º–µ–Ω–∞":
        user_data['admin_state'] = 'group_settings'
        await show_group_registration_settings(update, context, db)
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    import re
    match = re.search(r'(\d+)', text)
    if match:
        new_size = int(match.group(1))
        if 1 <= new_size <= 5:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
            db.set_bot_setting('max_group_size', str(new_size))
            await update.message.reply_text(f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_size} —á–µ–ª–æ–≤–µ–∫!")
        else:
            await update.message.reply_text("‚ùå –†–∞–∑–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 5 —á–µ–ª–æ–≤–µ–∫.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
    
    user_data['admin_state'] = 'group_settings'
    await show_group_registration_settings(update, context, db) 