import logging
from datetime import timedelta
from telegram import Update
from telegram.ext import ContextTypes
from services.event_service import EventService
from services.notification_service import NotificationService
from data.database import Database
from utils.keyboard import create_admin_keyboard, create_event_creation_keyboard, create_settings_keyboard, create_main_keyboard, get_is_joined, create_participant_limit_keyboard
from utils.timezone_utils import get_now_with_timezone
from config.settings import ADMIN_IDS

logger = logging.getLogger(__name__)


async def handle_admin_commands(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               event_service: EventService, notification_service: NotificationService, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    if not update.message or not update.message.text:
        return

    user = update.effective_user
    if not user or user.id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    text = update.message.text.strip()
    user_data = context.user_data if context.user_data is not None else {}
    admin_state = user_data.get('admin_state')

    if text == "/admin":
        user_data['admin_state'] = 'main'
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_admin_keyboard()
        )
        return

    if text == "üîô –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º":
        user_data.pop('admin_state', None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        if not update.effective_user:
            is_joined = False
        else:
            is_joined = get_is_joined(db, event_service, update.effective_user.id)
        
        await update.message.reply_text(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —Ä–µ–∂–∏–º–∞.",
            reply_markup=create_main_keyboard(is_joined=is_joined)
        )
        return

    if admin_state == 'main':
        await handle_main_admin_menu(update, context, text, event_service, db)
    elif admin_state == 'create_event':
        await handle_create_event(update, context, text, event_service, notification_service)
    elif admin_state == 'settings':
        await handle_settings(update, context, text, event_service)
    elif admin_state == 'confirm_delete':
        await handle_confirm_delete(update, context, text, event_service)
    elif admin_state == 'participant_limit':
        await handle_participant_limit(update, context, text, event_service)
    elif admin_state is None and text in [
        "üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    ]:
         await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é —Å–Ω–æ–≤–∞, –æ—Ç–ø—Ä–∞–≤–∏–≤ /admin.")
    


async def handle_main_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, 
                                 event_service: EventService, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é."""
    if not update.message:
        return

    user_data = context.user_data if context.user_data is not None else {}

    if text == "üìÖ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        user_data['admin_state'] = 'create_event'
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:",
            reply_markup=create_event_creation_keyboard()
        )
    elif text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ":
        await show_active_events_for_deletion(update, context, event_service)
    elif text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
        await show_users_list(update, context, db)
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_statistics(update, context, db)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        user_data['admin_state'] = 'settings'
        await update.message.reply_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:",
            reply_markup=create_settings_keyboard()
        )
    else:
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=create_admin_keyboard()
        )


async def handle_create_event(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, 
                             event_service: EventService, notification_service: NotificationService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    if not update.message:
        return

    user_data = context.user_data if context.user_data is not None else {}

    if text == "üîô –ù–∞–∑–∞–¥":
        user_data['admin_state'] = 'main'
        await update.message.reply_text(
            "–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:",
            reply_markup=create_admin_keyboard()
        )
        return

    try:
        event_name_part = ""
        days_offset = 0
        if text == "üèê –ß–µ—Ç–≤–µ—Ä–≥ 20:00":
            event_name_part = "–ß–µ—Ç–≤–µ—Ä–≥ 20:00"
            days_offset = (3 - get_now_with_timezone().weekday() + 7) % 7
        elif text == "üèê –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00":
            event_name_part = "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 20:00"
            days_offset = (6 - get_now_with_timezone().weekday() + 7) % 7
        
        if event_name_part:
            target_date = get_now_with_timezone().date() + timedelta(days=days_offset)
            event_id = event_service.create_event_on_date(target_date)
            event = event_service.get_event_by_id(event_id)
            if event:
                await notification_service.send_event_notification(event_id, event['name'])
                await update.message.reply_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {event['name']}")
            else:
                 await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ.")
        elif text == "üìÖ –î—Ä—É–≥–∞—è –¥–∞—Ç–∞":
            await update.message.reply_text("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

        user_data['admin_state'] = 'main'
        await update.message.reply_text("–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=create_admin_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")


async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, event_service: EventService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    if not update.message:
        return
    user_data = context.user_data if context.user_data is not None else {}
    
    if text == "üîô –ù–∞–∑–∞–¥":
        user_data['admin_state'] = 'main'
        await update.message.reply_text("–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=create_admin_keyboard())
        return
    elif text == "üë• –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        current_limit = event_service.get_participant_limit()
        user_data['admin_state'] = 'participant_limit'
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_limit}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç:",
            reply_markup=create_participant_limit_keyboard()
        )
        return
    
    await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


async def handle_participant_limit(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, event_service: EventService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."""
    if not update.message:
        return
    user_data = context.user_data if context.user_data is not None else {}
    
    if text == "üîô –ù–∞–∑–∞–¥":
        user_data['admin_state'] = 'settings'
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=create_settings_keyboard())
        return
    
    # –ü–∞—Ä—Å–∏–º –ª–∏–º–∏—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞
    limit_map = {
        "4 —É—á–∞—Å—Ç–Ω–∏–∫–∞": 4,
        "6 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": 6,
        "12 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": 12,
        "18 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤": 18,
        "24 —É—á–∞—Å—Ç–Ω–∏–∫–∞": 24
    }
    
    if text in limit_map:
        new_limit = limit_map[text]
        old_limit = event_service.get_participant_limit()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
        event_service.set_participant_limit(new_limit)
        
        await update.message.reply_text(
            f"‚úÖ –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω —Å {old_limit} –Ω–∞ {new_limit}.\n\n"
            "–°—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
        user_data['admin_state'] = 'main'
        await update.message.reply_text("–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=create_admin_keyboard())
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=create_participant_limit_keyboard()
        )


async def show_active_events_for_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE, event_service: EventService):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    if not update.message:
        return
    
    active_events = event_service.get_active_events()
    
    if not active_events:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    events_text = "–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n\n" + "\n".join(
        [f"{i}. {event['name']} (ID: {event['id']})" for i, event in enumerate(active_events, 1)]
    )
    events_text += "\n\n–î–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ ID (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14):"
    
    user_data = context.user_data if context.user_data is not None else {}
    user_data['admin_state'] = 'confirm_delete'
    user_data['active_events_for_deletion'] = active_events
    
    await update.message.reply_text(events_text)


async def handle_confirm_delete(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, event_service: EventService):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø–æ ID."""
    if not update.message:
        return
    try:
        event_id = int(text)
        user_data = context.user_data if context.user_data is not None else {}
        active_events = user_data.get('active_events_for_deletion', [])
        event_to_delete = next((event for event in active_events if event['id'] == event_id), None)
        if event_to_delete:
            event_service.delete_event(event_to_delete['id'])
            await update.message.reply_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{event_to_delete['name']}' —É–¥–∞–ª–µ–Ω–æ.")
        else:
            events_text = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è.\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n" + "\n".join(
                [f"{event['name']} (ID: {event['id']})" for event in active_events]
            )
            await update.message.reply_text(events_text)
    except (ValueError, TypeError):
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14)")
    user_data = context.user_data if context.user_data is not None else {}
    user_data['admin_state'] = 'main'
    await update.message.reply_text("–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=create_admin_keyboard())


async def show_users_list(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    if not update.message:
        return
    
    users = db.get_all_users()
    
    if not users:
        await update.message.reply_text("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    users_text = f"–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):\n\n"
    users_list = []
    for i, user in enumerate(users[:20], 1):
        username = f"@{user['username']}" if user['username'] else "–ù–µ—Ç username"
        users_list.append(f"{i}. {user['first_name']} ({username}) - ID: {user['telegram_id']}")

    users_text += "\n".join(users_list)
    
    if len(users) > 20:
        users_text += f"\n\n... –∏ –µ—â–µ {len(users) - 20} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    
    await update.message.reply_text(users_text)


async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–±—ã—Ç–∏–π, –∞ —Ç–∞–∫–∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ."""
    if not update.message:
        return
    total_users = db.get_total_users_count()
    active_events = db.get_active_events()
    total_active_events = len(active_events)
    participants_count = 0
    if active_events:
        event_id = active_events[0]['id']
        participants = db.get_event_participants(event_id)
        participants_count = len(participants)
    stat_text = (
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {total_active_events}\n"
        f"–ó–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–±—ã—Ç–∏–µ: {participants_count} —Å–ø–æ—Ä—Ç—Å–º–µ–Ω–æ–≤"
    )
    await update.message.reply_text(stat_text) 