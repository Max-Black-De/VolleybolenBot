import logging
from typing import List, Dict, Optional
from data.database import Database

logger = logging.getLogger(__name__)

class ChatHistoryService:
    def __init__(self, database: Database):
        self.db = database
    
    def save_user_message(self, telegram_id: int, message_text: str, event_id: Optional[int] = None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.db.save_message(telegram_id, message_text, 'user', event_id)
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {message_text[:50]}...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    def save_bot_message(self, telegram_id: int, message_text: str, event_id: Optional[int] = None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
        try:
            self.db.save_message(telegram_id, message_text, 'bot', event_id)
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è {telegram_id}: {message_text[:50]}...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
    
    def save_system_message(self, telegram_id: int, message_text: str, event_id: Optional[int] = None):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            self.db.save_message(telegram_id, message_text, 'system', event_id)
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è {telegram_id}: {message_text[:50]}...")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def get_user_history(self, telegram_id: int, limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            return self.db.get_chat_history(telegram_id, limit)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
            return []
    
    def get_recent_history(self, telegram_id: int, hours: int = 24) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω—é—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"""
        try:
            return self.db.get_recent_chat_history(telegram_id, hours)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–¥–∞–≤–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return []
    
    def format_history_for_display(self, history: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not history:
            return "–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø—É—Å—Ç–∞."
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
        sorted_history = sorted(history, key=lambda x: x['created_at'])
        
        lines = ["üìú –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞:"]
        for msg in sorted_history:
            timestamp = msg['created_at']
            if isinstance(timestamp, str):
                # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è –∏–∑ timestamp –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
                time_part = timestamp.split(' ')[1][:5] if ' ' in timestamp else timestamp[:5]
            else:
                time_part = str(timestamp)[:5]
            
            message_type = msg['message_type']
            text = msg['message_text']
            
            if message_type == 'user':
                lines.append(f"üë§ [{time_part}] –í—ã: {text}")
            elif message_type == 'bot':
                lines.append(f"ü§ñ [{time_part}] –ë–æ—Ç: {text}")
            else:
                lines.append(f"‚öôÔ∏è [{time_part}] –°–∏—Å—Ç–µ–º–∞: {text}")
        
        return "\n".join(lines)
    
    def clear_user_history(self, telegram_id: int):
        """–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            self.db.clear_chat_history(telegram_id)
            logger.info(f"–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    def get_history_stats(self, telegram_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞"""
        try:
            total_messages = self.db.get_chat_history_count(telegram_id)
            recent_history = self.get_recent_history(telegram_id, 24)
            
            user_messages = len([msg for msg in recent_history if msg['message_type'] == 'user'])
            bot_messages = len([msg for msg in recent_history if msg['message_type'] == 'bot'])
            
            return {
                'total_messages': total_messages,
                'recent_user_messages': user_messages,
                'recent_bot_messages': bot_messages,
                'recent_total': len(recent_history)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {'total_messages': 0, 'recent_user_messages': 0, 'recent_bot_messages': 0, 'recent_total': 0} 